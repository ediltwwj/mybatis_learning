<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mybatis.dao.UserDao">

    <!-- 了解的内容，用于抽取重复的Sql语句 -->
    <!--<sql id="defaultUser">-->
        <!--select * from user-->
    <!--</sql>-->

    <!-- 使用include去实现代替 -->
    <!--<select id="findAll" resultType="com.mybatis.domain.User">-->
        <!--<include refid="defaultUser"></include>-->
    <!--</select>-->

    <!-- 查询所有 -->
    <select id="findAll" resultType="com.mybatis.domain.User">
        select * from user;
    </select>

    <!-- 根据条件查询用户 条件很多的时候很繁琐 1=1表示后面所有条件都要为真
    <select id="findUserByCondition" parameterType="com.mybatis.domain.User" resultType="com.mybatis.domain.User">
        select * from user where 1=1
        <if test="username != null">
            and username = #{username}
        </if>
        <if test="sex != null">
            and sex = #{sex}
        </if>
    </select>
    -->

    <!-- 根据条件查询用户 -->
    <select id="findUserByCondition" parameterType="com.mybatis.domain.User" resultType="com.mybatis.domain.User">
        select * from user
        <where>
            <if test="username != null">
                and username = #{username}
            </if>
            <if test="sex != null">
                and sex = #{sex}
            </if>
        </where>
    </select>

    <!-- 根据queryVo中的id集合实现查询用户列表 -->
    <select id="findUserInIds" parameterType="com.mybatis.domain.QueryVo" resultType="com.mybatis.domain.User">
        select * from user
        <where>
            <if test="ids != null and ids.size()>0">
                <!-- 从collection里遍历，每个对象为item,并用separator分隔，最后放在open和close之间 -->
                <foreach collection="ids" open="and id in (" close=")" item="id" separator=",">
                    #{id} <!-- #{}和item属性对应-->
                </foreach>
            </if>
        </where>
    </select>
</mapper>